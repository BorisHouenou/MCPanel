load("~/Dropbox/matrix_completion_for_panel_data/codes/data/unemp.RData")
View(Y)
View(Y)
View(Y)
size(Y)
shape(Y)
ls.size(Y)
View(Y)
dim(Y)
load("~/Stanford/Research/PanelData/unemp.RData")
load("~/Stanford/Research/PanelData/unemp.RData")
dim(Y)
write.csv(Y)
write.csv(Y, file = "unin.csv")
write.matrix(Y, file = paste(targetPath, "unem.csv", sep="/"), sep=",")
write.matrix(Y, file = paste(targetPath, "unem.csv", sep="/"), sep=",")
write.matrix(Y, file = "unem.csv")
library(MASS)
write.matrix(Y, file = "unem.csv")
write.matrix(Y, `/Home/Stanford/Research/PanelData/"unem.csv")
write.matrix(Y, `/Home/Stanford/Research/PanelData/unem.csv')
)
end
''
write.matrix(Y, "/Home/Stanford/Research/PanelData/unem.csv")
write.matrix(Y, '/Home/Stanford/Research/PanelData/unem.csv')
write.matrix(Y, '~/Home/Stanford/Research/PanelData/unem.csv')
write.table(Y, file="unem.csv", row.names=FALSE, col.names=FALSE)
write.table(Y, file="unem.csv", row.names=FALSE, col.names=FALSE)
write.table(Y, file="unem.csv")
write.table(Y, file="unem.csv")
write.matrix(Y, file="unem.csv")
write.csvZ(Y)
write.csv(Y)
Z <- write.csv(Y)
CSV.write(unem, Y, append = FALSE, first.cell = "RowName")
csv.write(unem, Y, append = FALSE, first.cell = "RowName")
csv.write
write.table(Y, sep=",")
load("~/Dropbox/matrix_completion_for_panel_data/codes/unemp_May_3_cv_rank_reg.RData")
Rhome
Rhome {base}
R.home(component="home")
install.packages("RcppEigen")
VectorXd getEigenValues(Map<MatrixXd> M) {
SelfAdjointEigenSolver<MatrixXd> es(M);
return es.eigenvalues();
}
ls
Rcpp.package.skeleton("mcnnm", example_code = FALSE, cpp_files = c("mcnnm.cpp"))
Rcpp.package.skeleton("mcnnm", example_code = FALSE, cpp_files = c("mcnnm.cpp"))
library(Rcpp)
Rcpp.package.skeleton("mcnnm", example_code = FALSE, cpp_files = c("mcnnm.cpp"))
library(numDeriv)
install.packages(numDeriv)
install.packages(ucminf)
install.packages(BB)
install.packages(ucminf)
install.packages(BB)
install.packages(Regmin)
install.packages("numDe")
install.packages(c("numDeriv", "ucminf", "BB", "Regmin", "Rvmmin", "minga", "setRNG", "dfoptim", "svUnit"))
library(numDeriv)
library(minga)
install.packages(c("Rcgmin","minqa"))
library(synth)
library(Synth)
M
synth
synth.tab()
ls
library(mcnnm)
T = 40
N = 40
N = 40
T = 40
noise_sc = 0.1
delta_sc = 0.1
gamma_sc = 0.1
A = replicate(m,rnorm(r))
A = replicate(N,rnorm(R))
N = 40 # Number of units
T = 40 # Number of time-periods
R = 5 # Rank of matrix
noise_sc = 0.1 # Noise scale
delta_sc = 0.1 # delta scale
gamma_sc = 0.1 # gamma scale
A = replicate(N,rnorm(R))
View(A)
delta = rnorm(N)
gamma = rnorm(T)
A = replicate(R,rnorm(N))
B = replicate(T,rnorm(R))
delta = delta_sc*rnorm(N)
gamma = gamma_sc*rnorm(T)
A = replicate(R,rnorm(N))
B = replicate(T,rnorm(R))
delta = delta_sc*rnorm(N)
gamma = gamma_sc*rnorm(T)
true_mat = A %*% B + replicate(delta,T) + t(replicate(gamma,N))
gamma
replicate(gamma,N)
replicate(N,gamma)
true_mat = A %*% B + replicate(T,delta) + t(replicate(N,gamma))
noise = noise_sc*replicate(T,rnorm(N))
mask = matrix(rbinom(N*T,1,fr_obs),N,T)
fr_obs = 0.8 # fraction of observed entries
mask = matrix(rbinom(N*T,1,fr_obs),N,T)
obs_mat = noisy_mat * mask
delta = delta_sc*rnorm(N)
gamma = gamma_sc*rnorm(T)
noise = noise_sc*replicate(T,rnorm(N))
true_mat = A %*% B + replicate(T,delta) + t(replicate(N,gamma))
noisy_mat = true_mat + noise
mask = matrix(rbinom(N*T,1,fr_obs),N,T)
obs_mat = noisy_mat * mask
View(obs_mat)
model_without_fixed_effects <- mcnnm_cv(obs_mat,mask)
library(mcnnm)
N = 40 # Number of units
T = 40 # Number of time-periods
R = 5 # Rank of matrix
noise_sc = 0.1 # Noise scale
delta_sc = 0.1 # delta scale
gamma_sc = 0.1 # gamma scale
fr_obs = 0.8 # fraction of observed entries
A = replicate(R,rnorm(N))
B = replicate(T,rnorm(R))
delta = delta_sc*rnorm(N)
gamma = gamma_sc*rnorm(T)
noise = noise_sc*replicate(T,rnorm(N))
true_mat = A %*% B + replicate(T,delta) + t(replicate(N,gamma))
noisy_mat = true_mat + noise
mask = matrix(rbinom(N*T,1,fr_obs),N,T)
obs_mat = noisy_mat * mask
model_without_fixed_effects <- mcnnm_cv(obs_mat,mask)
model_with_delta <- mcnnm_cv(obs_mat, mask, 1, 0)
model_with_gamma <- mcnnm_cv(obs_mat, mask, 0, 1)
model_with_both_effects <- mcnnm_cv(obs_mat, mask, 1, 1)
library(mcnnm)
N = 40 # Number of units
T = 40 # Number of time-periods
R = 5 # Rank of matrix
noise_sc = 0.1 # Noise scale
delta_sc = 0.1 # delta scale
gamma_sc = 0.1 # gamma scale
fr_obs = 0.8 # fraction of observed entries
A = replicate(R,rnorm(N))
B = replicate(T,rnorm(R))
delta = delta_sc*rnorm(N)
gamma = gamma_sc*rnorm(T)
noise = noise_sc*replicate(T,rnorm(N))
true_mat = A %*% B + replicate(T,delta) + t(replicate(N,gamma))
noisy_mat = true_mat + noise
mask = matrix(rbinom(N*T,1,fr_obs),N,T)
obs_mat = noisy_mat * mask
model_without_fixed_effects <- mcnnm_cv(obs_mat,mask)
setwd('Users/khosravi/atom/matrix_completion/mcnnm')
setwd('/Users/khosravi/atom/matrix_completion/mcnnm')
Rcpp::compileAttributes
Rcpp::compileAttributes()
ls
library(mcnnm)
N = 40 # Number of units
T = 40 # Number of time-periods
R = 5 # Rank of matrix
noise_sc = 0.1 # Noise scale
delta_sc = 0.1 # delta scale
gamma_sc = 0.1 # gamma scale
fr_obs = 0.8 # fraction of observed entries
A = replicate(R,rnorm(N))
B = replicate(T,rnorm(R))
delta = delta_sc*rnorm(N)
gamma = gamma_sc*rnorm(T)
noise = noise_sc*replicate(T,rnorm(N))
true_mat = A %*% B + replicate(T,delta) + t(replicate(N,gamma))
noisy_mat = true_mat + noise
mask = matrix(rbinom(N*T,1,fr_obs),N,T)
obs_mat = noisy_mat * mask
model_without_fixed_effects <- mcnnm_cv(obs_mat,mask)
Rcpp::compileAttributes()
setwd('/src')
setwd('src')
Rcpp::compileAttributes()
setwd('..')
library(mcnnm)
N = 40 # Number of units
T = 40 # Number of time-periods
R = 5 # Rank of matrix
noise_sc = 0.1 # Noise scale
mcnnm_cv
mcnnm_cv(M,mask)
NNM_CV
NNM_CV
setwd('/Users/khosravi/atom/matrix_completion/')
library(Rcpp)
list(rm=ls())
rm(list=ls())
library(Rcpp)
Rcpp.package.skeleton("mcnnm", example_code = FALSE, cpp_files = c("mcnnm.cpp"))
setwd('mcnnm')
compileAttributes()
compileAttributes()
compileAttributes()
compileAttributes()
compileAttributes()
compileAttributes()
compileAttributes()
source('~/atom/matrix_completion/MCPanel/tests/stock.R')
source('~/atom/matrix_completion/MCPanel/tests/stock.R')
p = ggplot(data = df1, aes(x, y, color = Method)) +
geom_point(size = 2, position=position_dodge(width=0.1)) +
geom_errorbar(
aes(ymin = lb, ymax = ub),
width = 0.1,
linetype = "solid",
position=position_dodge(width=0.1)) +
theme_bw() + xlab(TeX('$T_0/T$')) + ylab("Average RMSE") + ylim(0.015,0.04)
print(p)
##
filename<-paste0(paste0(paste0(paste0(paste0("stock_data_N_", N),"_T_", T),"_numruns_", num_runs), "_num_treated_", N_t), "_simultaneuous_", is_simul)
ggsave(filename, plot = last_plot(), device="png", dpi=600)
source('~/atom/matrix_completion/MCPanel/tests/stock.R')
source('~/atom/matrix_completion/MCPanel/tests/stock.R')
source('~/atom/matrix_completion/MCPanel/tests/stock.R')
source('~/atom/matrix_completion/MCPanel/tests/stock.R')
source('~/atom/matrix_completion/MCPanel/tests/stock.R')
source('~/atom/matrix_completion/MCPanel/tests/stock.R')
source('~/atom/matrix_completion/MCPanel/tests/stock.R')
source('~/atom/matrix_completion/MCPanel/tests/stock.R')
source('~/atom/matrix_completion/MCPanel/tests/stock.R')
p = ggplot(data = df1, aes(x, y, color = Method)) +
geom_point(size = 2, position=position_dodge(width=0.1)) +
geom_errorbar(
aes(ymin = lb, ymax = ub),
width = 0.1,
linetype = "solid",
position=position_dodge(width=0.1)) +
theme_bw() + xlab(TeX('$T_0/T$')) + ylab("Average RMSE") + ylim(0.02,0.05)
print(p)
##
filename<-paste0(paste0(paste0(paste0(paste0("stock_data_N_", N),"_T_", T),"_numruns_", num_runs), "_num_treated_", N_t), "_simultaneuous_", is_simul)
ggsave(filename, plot = last_plot(), device="png", dpi=600)
source('~/atom/matrix_completion/MCPanel/tests/stock.R')
rm(list=ls())
setwd("/Users/khosravi/atom/matrix_completion/MCPanel/tests/")
library(glmnet)
library(Synth)
library(MCPanel)
library(ggplot2)
library(latex2exp)
source("EN.R")
source("DID.R")
source("aux.R")
source("ADH.R")
X <- read.csv('./data/smok_covariates.csv',header=F)
Y <- t(read.csv('./data/smok_outcome.csv',header=F))
rm(list=ls())
setwd("/Users/khosravi/atom/matrix_completion/MCPanel/tests/")
library(glmnet)
library(Synth)
library(MCPanel)
library(ggplot2)
library(latex2exp)
source("EN.R")
source("DID.R")
source("aux.R")
source("ADH.R")
X <- read.csv('./examples_from_paper/california/smok_covariates.csv',header=F)
Y <- t(read.csv('./examples_from_paper/california/smok_outcome.csv',header=F))
treat <- t(read.csv('./examples_from_paper/california/smok_treatment.csv',header=F))
years <- 1970:2000
CA_y <- Y[1,]
treat <- treat[-1,]
Y <- Y[-1,]
N <- nrow(treat)
T <- ncol(treat)
number_T0 = 5
T0 <- ceiling(T*((1:number_T0)*2-1)/(2*number_T0))
N_t <- 8
num_runs <- 10
to_run_adh <- 1
is_simul <- 1
source('~/atom/matrix_completion/MCPanel/tests/examples_from_paper/california/california_smoking.R')
Y <- t(read.csv('./data/returns_no_missing.csv',header=F))
setwd("/Users/khosravi/atom/matrix_completion/MCPanel/tests/") ## Change it to your local directory
source("EN.R")
source("DID.R")
source("aux.R")
source("ADH.R")
library(MCPanel)
library(latex2exp)
library(glmnet)
library(ggplot2)
Y <- t(read.csv('./data/returns_no_missing.csv',header=F))
Nbig <- nrow(Y)
rm(list=ls())
setwd("/Users/khosravi/atom/matrix_completion/MCPanel/tests/") ## Change it to your local directory
source("EN.R")
source("DID.R")
source("aux.R")
source("ADH.R")
library(MCPanel)
library(latex2exp)
library(glmnet)
library(ggplot2)
Y <- t(read.csv('./examples_from_paper/stock/returns_no_missing.csv',header=F))
