// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// NNM_fit
List NNM_fit(NumericMatrix M, NumericMatrix mask, NumericMatrix L_init, NumericVector u_init, NumericVector v_init, bool to_estimate_u, bool to_estimate_v, double lambda_L, int niter, double rel_tol, bool is_quiet);
RcppExport SEXP _MCPanel_NNM_fit(SEXP MSEXP, SEXP maskSEXP, SEXP L_initSEXP, SEXP u_initSEXP, SEXP v_initSEXP, SEXP to_estimate_uSEXP, SEXP to_estimate_vSEXP, SEXP lambda_LSEXP, SEXP niterSEXP, SEXP rel_tolSEXP, SEXP is_quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type L_init(L_initSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u_init(u_initSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v_init(v_initSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_u(to_estimate_uSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_v(to_estimate_vSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_L(lambda_LSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< bool >::type is_quiet(is_quietSEXP);
    rcpp_result_gen = Rcpp::wrap(NNM_fit(M, mask, L_init, u_init, v_init, to_estimate_u, to_estimate_v, lambda_L, niter, rel_tol, is_quiet));
    return rcpp_result_gen;
END_RCPP
}
// NNM
List NNM(NumericMatrix M, NumericMatrix mask, bool to_estimate_u, bool to_estimate_v, NumericVector lambda_L, int niter, double rel_tol, bool is_quiet);
RcppExport SEXP _MCPanel_NNM(SEXP MSEXP, SEXP maskSEXP, SEXP to_estimate_uSEXP, SEXP to_estimate_vSEXP, SEXP lambda_LSEXP, SEXP niterSEXP, SEXP rel_tolSEXP, SEXP is_quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_u(to_estimate_uSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_v(to_estimate_vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_L(lambda_LSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< bool >::type is_quiet(is_quietSEXP);
    rcpp_result_gen = Rcpp::wrap(NNM(M, mask, to_estimate_u, to_estimate_v, lambda_L, niter, rel_tol, is_quiet));
    return rcpp_result_gen;
END_RCPP
}
// NNM_CV
List NNM_CV(NumericMatrix M, NumericMatrix mask, bool to_estimate_u, bool to_estimate_v, int num_lam, int niter, double rel_tol, double cv_ratio, int num_folds, bool is_quiet);
RcppExport SEXP _MCPanel_NNM_CV(SEXP MSEXP, SEXP maskSEXP, SEXP to_estimate_uSEXP, SEXP to_estimate_vSEXP, SEXP num_lamSEXP, SEXP niterSEXP, SEXP rel_tolSEXP, SEXP cv_ratioSEXP, SEXP num_foldsSEXP, SEXP is_quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_u(to_estimate_uSEXP);
    Rcpp::traits::input_parameter< bool >::type to_estimate_v(to_estimate_vSEXP);
    Rcpp::traits::input_parameter< int >::type num_lam(num_lamSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< double >::type cv_ratio(cv_ratioSEXP);
    Rcpp::traits::input_parameter< int >::type num_folds(num_foldsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_quiet(is_quietSEXP);
    rcpp_result_gen = Rcpp::wrap(NNM_CV(M, mask, to_estimate_u, to_estimate_v, num_lam, niter, rel_tol, cv_ratio, num_folds, is_quiet));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MCPanel_NNM_fit", (DL_FUNC) &_MCPanel_NNM_fit, 11},
    {"_MCPanel_NNM", (DL_FUNC) &_MCPanel_NNM, 8},
    {"_MCPanel_NNM_CV", (DL_FUNC) &_MCPanel_NNM_CV, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_MCPanel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
